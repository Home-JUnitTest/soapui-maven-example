<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project xmlns:con="http://eviware.com/soapui/config" id="a452dcbb-f3ab-4e8b-b0d8-24b6954d57ba" activeEnvironment="Default" name="MDES" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL">
    <con:settings />
    <con:properties />
    <con:wssContainer />
    <con:oAuth2ProfileContainer />
    <con:oAuth1ProfileContainer />
    <con:sensitiveInformation />

    <con:restMockService id="86dac281-76db-4f6d-a175-aaacaea550dd" port="8090" path="/" host="DESKTOP-JVAB5JF" name="REST MockService 1" docroot="">
        <con:settings />
        <con:properties />
        <con:onRequestScript />
        <con:restMockAction name="/mdes/csapi/v2/search" method="POST" resourcePath="/mdes/csapi/v2/search" id="fc01d0d9-cbc9-4781-ba65-c3094812dd63">
            <con:settings />
            <con:defaultResponse>Response 1</con:defaultResponse>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>
                /*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") ) {
                    // return the name of the response you want to dispatch
                    return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") ) {
                    // return the name of the response you want to dispatch
                    return "Response Stockholm"
                } else if( queryString.contains("london") ) {
                    // return the name of the response you want to dispatch
                    return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") ) {
                    // return the name of the response you want to dispatch
                    return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") ) {
                    // return the name of the response you want to dispatch
                    return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="28cb6398-f5a5-4f85-bf8b-29e1a8571687" httpResponseStatus="200" mediaType="application/json">
                <con:settings />
                <con:responseContent>
                    {
                      "SearchResponse": {
                        "Accounts": {
                          "Account": [
                            {
                              "AccountPanSuffix": "1234",
                              "ExpirationDate": "1215",
                              "Tokens": {
                                "Token": [
                                  {
                                    "TokenUniqueReference": "DTC1MC0000171740bf9605c539fe4c41834520eeb0719632",
                                    "PrimaryAccountNumberUniqueReference": "DTC1MC0000171740bf9605c539fe4c41834520eeb0719632",
                                    "TokenSuffix": "7639",
                                    "ExpirationDate": "0216",
                                    "DigitizationRequestDateTime": "2015-01-20T18:04:35-06:00",
                                    "TokenActivatedDateTime": "2015-01-20T18:04:35-06:00",
                                    "FinalTokenizationDecision": "R",
                                    "CorrelationId": "D0000003321934",
                                    "CurrentStatusCode": "U",
                                    "CurrentStatusDescription": "Inactive",
                                    "CurrentStatusDateTime": "2015-01-20T18:04:45-06:00",
                                    "ProvisioningStatusCode": "A",
                                    "ProvisioningStatusDescription": "Provisioning successful",
                                    "TokenRequestorId": "40010030273",
                                    "WalletId": "103",
                                    "PaymentAppInstanceId": "92de9357a535b2c21a3566e446f43c532a46b54c46",
                                    "TokenType": "S",
                                    "LastCommentId": "2376",
                                    "Device": {
                                      "DeviceId": "3e5edf24a24ba98e27d43e345b532a245e4723d7a9c4f624e93452c92de9357a535b2c21a3566e446f43c532d34s6",
                                      "DeviceName": "John Phone",
                                      "DeviceType": "09",
                                      "SecureElementId": "92de9357a535b2c21a3566e446f43c532a46b54c46"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    }
                </con:responseContent>
            </con:response>
        </con:restMockAction>

        <con:restMockAction name="/mdes/csapi/v2/token/delete" method="POST" resourcePath="/mdes/csapi/v2/token/delete" id="06720fb6-73d9-4d1c-a90e-4ce4d913732d">
            <con:settings />
            <con:defaultResponse>Response 1</con:defaultResponse>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>
                /*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") ) {
                    // return the name of the response you want to dispatch
                    return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") ) {
                    // return the name of the response you want to dispatch
                    return "Response Stockholm"
                } else if( queryString.contains("london") ) {
                    // return the name of the response you want to dispatch
                    return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") ) {
                    // return the name of the response you want to dispatch
                    return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") ) {
                    // return the name of the response you want to dispatch
                    return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="c83a2a84-7b4e-4251-9340-acebbc0c24e4" httpResponseStatus="200" mediaType="application/json">
                <con:settings />
                <con:responseContent>
                    {
                      "TokenActivateResponse": {
                        "Token": {
                          "TokenUniqueReference": "DTC1MC0000171740bf9605c539fe4c41834520eeb0719637",
                          "CommentId": "1234"
                        }
                      }
                    }
                </con:responseContent>
            </con:response>
        </con:restMockAction>

        <con:restMockAction name="/mdes/csapi/v2/token/activate" method="POST" resourcePath="/mdes/csapi/v2/token/activate" id="fe4ea1e8-d829-405d-91ff-c128b3785805">
            <con:settings />
            <con:defaultResponse>Response 1</con:defaultResponse>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>
                /*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") ) {
                    // return the name of the response you want to dispatch
                    return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") ) {
                    // return the name of the response you want to dispatch
                    return "Response Stockholm"
                } else if( queryString.contains("london") ) {
                    // return the name of the response you want to dispatch
                    return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") ) {
                    // return the name of the response you want to dispatch
                    return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") ) {
                    // return the name of the response you want to dispatch
                    return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="2f3fde0e-2583-4b3b-91a2-0ba0d5f109c6" httpResponseStatus="200" mediaType="application/json">
                <con:settings />
                <con:responseContent>
                    {
                      "TokenActivateResponse": {
                        "Token": {
                          "TokenUniqueReference": "DTC1MC0000171740bf9605c539fe4c41834520eeb0719137",
                          "CommentId": "1234"
                        }
                      }
                    }
                </con:responseContent>
            </con:response>
        </con:restMockAction>

        <con:restMockAction name="/mdes/csapi/v2/token/update" method="POST" resourcePath="/mdes/csapi/v2/token/update" id="28b6465b-2618-4774-99f0-9d2d56422596">
            <con:settings />
            <con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" />
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>
                /*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") ) {
                    // return the name of the response you want to dispatch
                    return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") ) {
                    // return the name of the response you want to dispatch
                    return "Response Stockholm"
                } else if( queryString.contains("london") ) {
                    // return the name of the response you want to dispatch
                    return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") ) {
                    // return the name of the response you want to dispatch
                    return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") ) {
                    // return the name of the response you want to dispatch
                    return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="b0366fd4-9eeb-465d-aeed-f88c89f93abc" httpResponseStatus="200" mediaType="application/json">
                <con:settings />
                <con:responseContent>
                    {
                      "TokenUpdateResponse": {
                        "Token": {
                          "TokenUniqueReference": "DTC1MC0000171740bf9605c539fe4c41834520eeb0719137",
                          "CommentId": "1234"
                        }
                      }
                    }
                </con:responseContent>
            </con:response>
        </con:restMockAction>
    </con:restMockService>

</con:soapui-project>