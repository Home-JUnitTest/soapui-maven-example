<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project xmlns:con="http://eviware.com/soapui/config" id="f9854840-1c49-470a-a73a-b7622c89551e" activeEnvironment="Default" name="REST Project 1" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL">
    <con:settings />
    <con:properties />
    <con:wssContainer />
    <con:oAuth2ProfileContainer />
    <con:oAuth1ProfileContainer />

    <con:restMockService id="c5fc3123-e7fb-4b45-991c-579d8983b084" port="8080" path="/" host="KNA-5CG7205F44" name="restmock">
        <con:settings />
        <con:properties />
        <con:restMockAction name="hello" method="GET" resourcePath="/hello" id="81cf52b4-65dd-4a09-8e62-badf598826f4">
            <con:settings />
            <con:defaultResponse>world</con:defaultResponse>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>
                /*
                // Диспетчер сценариев используется для выбора ответа на основе входящего запроса.
                // Вот несколько примеров, показывающих, как совместить на основе пути, параметра запроса, заголовка и тела

                // Совпадение по пути
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") ) {
                    // return the name of the response you want to dispatch
                    return "JSON Response"
                }


                // Совпадение на основе параметра запроса
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") ) {
                    // возвращаем имя ответа, который вы хотите отправить
                    return "Response Stockholm"
                } else if( queryString.contains("london") ) {
                    // возвращаем имя ответа, который вы хотите отправить
                    return "Response London"
                }


                // Совпадение по заголовку
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") ) {
                    // возвращаем имя ответа, который вы хотите отправить
                    return "GZiped Response"
                }


                // Совпадение по телу
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") ) {
                    // возвращаем имя ответа, который вы хотите отправить
                    return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="world" id="6fe8e3ec-32a0-4ef0-baf6-a271b6188b39" httpResponseStatus="200" mediaType="application/json">
                <con:settings />
                <con:responseContent>
                    {
                      "hello": "world"
                    }
                </con:responseContent>
            </con:response>
        </con:restMockAction>
    </con:restMockService>

    <con:testSuite id="72a8bcac-9f7e-4817-bb0f-bfd7d35d8329" name="hellosuite">
        <con:settings />
        <con:runType>SEQUENTIAL</con:runType>
        <con:testCase id="319747eb-e201-469c-93d2-19ab4f1e2d9f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="hellocase" searchProperties="true">
            <con:settings />
            <con:testStep type="groovy" name="start mockservice" id="802c8021-144f-4f08-97f7-d61e07d3fcf3">
                <con:settings />
                <con:config>
                    <script>
                        def project = testRunner.testCase.testSuite.project
                        project.restMockServices[0].start()
                    </script>
                </con:config>
            </con:testStep>
            <con:testStep type="restrequest" name="hello-request" id="7de3a00f-5656-4a88-b799-04b11664f18f">
                <con:settings />
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:  " resourcePath="/hello" methodName="1" xsi:type="con:RestRequestStep">
                    <con:restRequest name="hello-request" id="c86a255f-8392-4571-86b8-a7e7277e44ac" mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080/</con:endpoint>
                        <con:request />
                        <con:originalUri>http://localhost/</con:originalUri>
                        <con:assertion type="GroovyScriptAssertion" id="c9b4518c-f991-4239-8ea8-138dd79af242" name="Script Assertion">
                            <con:configuration>
                                <scriptText>
                                    log.info "${messageExchange.response.responseContent}"
                                    messageExchange.response.responseContent.contains('world')
                                </scriptText>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT" />
                        <con:jmsPropertyConfig />
                        <con:parameters />
                        <con:parameterOrder />
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:testStep type="groovy" name="stop mockservice" id="091786dd-5cdf-4103-b7d9-1976b144993c">
                <con:settings />
                <con:config>
                    <script>
                        def project = testRunner.testCase.testSuite.project
                        project.restMockServices[0].mockRunner.stop()
                    </script>
                </con:config>
            </con:testStep>
            <con:properties />
        </con:testCase>
        <con:properties />
    </con:testSuite>
</con:soapui-project>
